{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Knowledge Hub <p>     A personal collection of documentation, covering Linux system setup and customization, along with      foundational and advanced topics in power system modeling and analysis.   </p> Linux Notes <p>       Notes on configuring and customizing Debian-based Linux systems. Covers setup, system tweaks, package management, network drives, user tools, and terminal productivity.     </p> Explore Linux Notes Power System Learnings <p>       Documentation focused on phasor and EMT domain analysis of power systems. Includes steady-state, transient, and converter-dominant modeling techniques used in modern grids.     </p> Explore Power Systems"},{"location":"Linux/","title":"Linux","text":"Linux Notes <p>     A curated set of notes for configuring and customizing Debian-based systems.     Includes tips for daily use, system personalization, package management, and essential software tools.   </p> Setup <ul> <li>Debian Trixie Setup</li> <li>Common Problems</li> <li>First Things First</li> </ul> Customization <ul> <li>System Customization</li> <li>Tips and Tweaks</li> </ul> Software <ul> <li>Docker</li> <li>Mini-forge</li> <li>Matlab</li> <li>Codium</li> <li>Zotero</li> <li>Kicad</li> </ul> Development <ul> <li>Git &amp; Coding Setup</li> </ul>"},{"location":"Linux/Customization/Customization/","title":"Customization","text":""},{"location":"Linux/Customization/Customization/#1-fastfetch","title":"1. Fastfetch","text":"<ol> <li>Download fastfetch from the Github repositary</li> <li>Install the .deb file</li> <li>Go to terminal and run     <pre><code>fastfetch\n</code></pre></li> <li>To view specific linux logo, use    <pre><code>fastfetch --logo debian\n</code></pre></li> <li> <p>To get all information    <pre><code>fastfetch -c all.jsonc\n</code></pre></p> </li> <li> <p>There are also modules to get specific information    <pre><code>fastfetch -s &lt;module&gt; --format json\n</code></pre></p> </li> </ol> <p>Replace 'module' with below</p> <p><code>1)  Battery       : Print battery capacity, status, etc 2)  Bios          : Print information of 1st-stage bootloader (name, version, release date, etc) 3)  Bluetooth     : List (connected) bluetooth devices 4)  BluetoothRadio: List bluetooth radios width supported version and vendor 5)  Board         : Print motherboard name and other info 6)  Bootmgr       : Print information of 2nd-stage bootloader (name, firmware, etc) 7)  Break         : Print a empty line 8)  Brightness    : Print current brightness level of your monitors 9)  Btrfs         : Print Linux BTRFS volumes 10) Camera        : Print available cameras 11) Chassis       : Print chassis type (desktop, laptop, etc) 12) Command       : Run custom shell scripts 13) Colors        : Print some colored blocks 14) CPU           : Print CPU name, frequency, etc 15) CPUCache      : Print CPU cache sizes 16) CPUUsage      : Print CPU usage. Costs some time to collect data 17) Cursor        : Print cursor style name 18) Custom        : Print a custom string, with or without key 19) DateTime      : Print current date and time 20) DE            : Print desktop environment name 21) Display       : Print resolutions, refresh rates, etc 22) Disk          : Print partitions, space usage, file system, etc 23) DiskIO        : Print physical disk I/O throughput 24) DNS           : Print configured DNS servers 25) Editor        : Print information of the default editor ($VISUAL or $EDITOR) 26) Font          : Print system font names 27) Gamepad       : List (connected) gamepads 28) GPU           : Print GPU names, graphic memory size, type, etc 29) Host          : Print product name of your computer 30) Icons         : Print icon style name 31) InitSystem    : Print init system (pid 1) name and version 32) Kernel        : Print system kernel version 33) Keyboard      : List (connected) keyboards 34) LM            : Print login manager (desktop manager) name and version 35) Loadavg       : Print system load averages 36) Locale        : Print system locale name 37) LocalIp       : List local IP addresses (v4 or v6), MAC addresses, etc 38) Media         : Print playing song name 39) Memory        : Print system memory usage info 40) Monitor       : Alias of Display module 41) Mouse         : List connected mouses 42) NetIO         : Print network I/O throughput 43) OpenCL        : Print highest OpenCL version supported by the GPU 44) OpenGL        : Print highest OpenGL version supported by the GPU 45) OS            : Print operating system name and version 46) Packages      : List installed package managers and count of installed packages 47) PhysicalDisk  : Print physical disk information 48) PhysicalMemory: Print system physical memory devices 49) Player        : Print music player name 50) PowerAdapter  : Print power adapter name and charging watts 51) Processes     : Print number of running processes 52) PublicIp      : Print your public IP address, etc 53) Separator     : Print a separator line 54) Shell         : Print current shell name and version 55) Sound         : Print sound devices, volume, etc 56) Swap          : Print swap (paging file) space usage 57) Terminal      : Print current terminal name and version 58) TerminalFont  : Print font name and size used by current terminal 59) TerminalSize  : Print current terminal size 60) TerminalTheme : Print current terminal theme (foreground and background colors) 61) Title         : Print title, which contains your user name, hostname 62) Theme         : Print current theme of desktop environment 63) TPM           : Print info of Trusted Platform Module (TPM) Security Device 64) Uptime        : Print how long system has been running 65) Users         : Print users currently logged in 66) Version       : Print Fastfetch version 67) Vulkan        : Print highest Vulkan version supported by the GPU 68) Wallpaper     : Print image file path of current wallpaper 69) Weather       : Print weather information 70) WM            : Print window manager name and version 71) Wifi          : Print connected Wi-Fi info (SSID, connection and security protocol) 72) WMTheme       : Print current theme of window manager 73) Zpool         : Print ZFS storage pools</code></p> <p>To add fastfetch to display when opening a new terminal, add it to the bashrc file.    <code>nano ~/.bashrc</code></p> <p><code>nano</code> launches the Nano text editor (a simple terminal-based text editor) <code>~/.bashrc</code> opens the <code>.bashrc</code> file located in your home directory. This file defines how your terminal behaves each time you open it. It runs commands, sets aliases, environment variables, or custom startup banners.</p> <p>Add <code>fastfetch</code> at the end.    ```</p> <pre><code>    _,met$$$$$gg.          gowtham@deb-gowarc\n ,g$$$$$$$$$$$$$$$P.       ------------------\n</code></pre> <p>,g$$P\"\"       \"\"\"Y$$.\".     OS: Debian GNU/Linux 12 (bookworm) x86_64   ,$$P'              <code>$$$.     Host: HP Pavilion Gaming Laptop 15-ec2xxx ',$$P       ,ggs.</code>$$b:    Kernel: Linux 6.1.0-37-amd64 <code>d$$'     ,$P\"'   .    $$$     Uptime: 16 mins  $$P      d$'     ,    $$P     Packages: 2264 (dpkg)  $$:      $$.   -    ,d$$'     Shell: bash 5.2.15  $$;      Y$b._   _,d$P'       Display (LGD05FE): 1920x1080 @ 144 Hz in 16\"  Y$$.</code>.<code>\"Y$$$$P\"'          DE: KDE Plasma 5.27.5</code>$$b      \"-.__               WM: KWin (X11)   <code>Y$$b                        WM Theme: Breeze</code>Y$$.                       Theme: Breeze (Light) [Qt], Breeze [GTK2/3]      <code>$$b.                     Icons: breeze [Qt], breeze [GTK2/3/4]</code>Y$$b.                  Font: Noto Sans (10pt) [Qt], Noto Sans (10pt) [GTK2/3/4]          <code>\"Y$b._               Cursor: breeze (24px)</code>\"\"\"\"             Terminal: konsole 22.12.3                                CPU: AMD Ryzen 7 5800H (16) @ 3.20 GHz                                GPU 1: NVIDIA GeForce RTX 3050 Mobile [Discrete]                                GPU 2: AMD Radeon Vega Series / Radeon Vega Mobile Series [Integrated]                                Memory: 2.59 GiB / 14.97 GiB (17%)                                Swap: 0 B / 977.00 MiB (0%)                                Disk (/): 9.52 GiB / 27.33 GiB (35%) - ext4                                Disk (/home): 14.93 GiB / 439.45 GiB (3%) - ext4                                Local IP (wlo1): 192.168.0.110/24                                Battery (Primary): 38% [Discharging]                                Locale: en_US.UTF-8</p> <p>gowtham@deb-gowarc:~$ </p> <p>```</p>"},{"location":"Linux/Customization/Customization/#2-oh-my-zsh","title":"2. Oh My Zsh","text":"<p>In order for Oh My Zsh to work, check if Zsh is installed using <code>zsh --version</code>. If not, <pre><code>sudo apt install zsh\n</code></pre></p> <p>Follow the github repo for installing <code>ohmyzsh</code>. <pre><code>sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n</code></pre> After installation, create a new profile on the KDE Konsole and add zsh as default shell by adding <code>/bin/zsh</code> as the command in profile settings.</p>"},{"location":"Linux/Customization/Customization/#themes","title":"Themes","text":"<p>To change the theme, edit the theme section in the <code>.zshrc</code> file using, <pre><code>nano ~/.zshrc\n</code></pre> A complete list of themes is here. I personally like <code>Agnoster</code></p> <p>Since, the default terminal is now changed to zsh, we can add fastfetch command at the end of the script to show the fastfetch details.</p> <p>When you want to change directory, it isn\u2019t necessary to enter the <code>cd command</code>; <code>cd Desktop</code> just becomes <code>Desktop</code>. And that works with paths, too: you can enter <code>/home/gowtham/Desktop</code> and end up right where you wanted to go. Typing <code>...</code> will move you up two directories. The <code>first two dots</code> will take <code>one dir</code> backwards. the rest <code>single dots</code> takes <code>one backwards</code>.</p> <p>Oh My Zsh also supports dynamic path completion, so typing <code>/h/g/De</code> and pressing <code>Tab</code> will expand the path to <code>/home/gowtham/Desktop</code>. </p>"},{"location":"Linux/Customization/Customization/#plugins-make-life-easier","title":"Plugins make life easier","text":"<p>docker-compose</p> <p>Add the needed plugin to the <code>.zshrc</code> file. For example, <code>plugins=(git docker-compose)</code>. Here is a list of all the shortcut commands for docker-composer.</p> <p>After adding this, restart the terminal or use <code>source ~/.zshrc</code>. </p> <p>Now, instead of using <code>docker compose up</code>, we can use <code>dcup</code>. </p> <p>web-search</p> <p>you\u2019re in the terminal and you need to google something.</p> <p>No need to switch over to your browser, just run the search from your terminal with the Web Search plugin. </p> <pre><code>brs uni oldenburg\n</code></pre> <p>To open raw urls, use <pre><code>open amazon.de\n</code></pre></p>"},{"location":"Linux/Customization/Customization/#3-thunderbird-html-signature","title":"3. Thunderbird HTML Signature","text":"<p>Here is a template for custom minimalistic signature </p> <pre><code>&lt;div style=\"font-family: Arial, sans-serif; font-size: 12px; color: #333; line-height: 1.4;\"&gt;\n  &lt;p style=\"margin: 0; font-weight: bold;\"&gt;Best Regards,&lt;/p&gt;\n  &lt;p style=\"margin: 0; font-weight: bold;\"&gt;Gowtham Mahendran&lt;/p&gt;\n  &lt;p style=\"margin: 0;\"&gt;MSc Sustainable Renewable Energy Technologies&lt;/p&gt;\n  &lt;p style=\"margin: 0;\"&gt;University of Oldenburg, Germany&lt;/p&gt;\n  &lt;p style=\"margin: 0;\"&gt;&lt;a href=\"https://linkedin.com/in/gowtham-mahendran\" style=\"color: #1a73e8; text-decoration: none;\"&gt;LinkedIn&lt;/a&gt; | &lt;a href=\"https://github.com/Gowtham-Mahendran?tab=repositories\" style=\"color: #1a73e8; text-decoration: none;\"&gt;GitHub&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>To fix text while composing a mail, change the settings like below</p> <p></p>"},{"location":"Linux/Customization/Tweaks/","title":"Tweaks","text":""},{"location":"Linux/Customization/Tweaks/#de-encrypt-a-pdf","title":"De-encrypt a pdf","text":"<ol> <li>Download <code>xpdf-utils' using</code>sudo apt-get install xpdf-utils`</li> </ol> <pre><code>gowtham@deb-gowarc \ue0b0 ~ \ue0b0 sudo apt-get install xpdf-utils\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nNote, selecting 'poppler-utils' instead of 'xpdf-utils'\npoppler-utils is already the newest version (22.12.0-2+deb12u1).\npoppler-utils set to manually installed.\nThe following packages were automatically installed and are no longer required:\n  libslirp0 pigz slirp4netns\nUse 'sudo apt autoremove' to remove them.\n0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.\n</code></pre> <ol> <li> <p>Debian is telling you that <code>xpdf-utils</code> has been replaced by <code>poppler-utils</code>, so when you try to install <code>xpdf-utils</code>, it just installs (or confirms you already have) <code>poppler-utils</code>.</p> </li> <li> <p>Go to the directory. To decrypt a PDF and create a postscript file</p> </li> </ol> <pre><code>pdftops -upw YOURPASSWORD-HERE input.pdf\n</code></pre> <p>This will create <code>input.ps</code> file. </p> <ol> <li>To convert <code>.ps</code> file (postscript) back to a <code>PDF</code>: <pre><code>ps2pdf input.ps\n</code></pre></li> </ol> <p>PDF will be created without a encrypt password.</p>"},{"location":"Linux/Customization/Tweaks/#uv-astral","title":"UV - astral","text":"<p>then</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>To extract .xz file, <pre><code>tar -xvf thunderbird-141.0.tar.xz\n</code></pre> Install extensions to enable exchange calendar</p> <p></p> <p>Go to TbSync account manager and add an exchange account with the credentials.</p> <p>sync calendar. It should now appear in Thunderbird calendar.</p>"},{"location":"Linux/Customization/Tweaks/#docker","title":"Docker","text":"<p>Install using the official Documentation</p> <p>Follow this after installation</p>"},{"location":"Linux/Customization/Tweaks/#vpn","title":"VPN","text":"<p>Install the GlobalProtect-openconnect client <code>.deb package</code> </p> <p>Verify installation using  <pre><code>gowtham@debian:~$ gpclient --version\ngpclient 2.4.5 (2025-07-16)\n</code></pre> To connect, use <code>sudo</code> and authenticate the login.</p> <pre><code>gowtham@debian:~$ sudo gpclient connect &lt;gateway&gt;\n</code></pre>"},{"location":"Linux/Customization/Tweaks/#latex","title":"Latex","text":"<p><code>sudo aptitude install texlive-full</code></p> <p>and then use vscode as a IDE for latex</p> <p>To verify,</p> <pre><code>(.venv)  gowtham@debian \ue0b0 ~/Documents/Git/Github/power-systems-lab \ue0b0 \ue0a0 main \ue0b0 tex --version\nTeX 3.141592653 (TeX Live 2025/dev/Debian)\nkpathsea version 6.4.0/dev\nCopyright 2024 D.E. Knuth.\nThere is NO warranty.  Redistribution of this software is\ncovered by the terms of both the TeX copyright and\nthe Lesser GNU General Public License.\nFor more information about these matters, see the file\nnamed COPYING and the TeX source.\nPrimary author of TeX: D.E. Knuth.\n(.venv)  gowtham@debian \ue0b0 ~/Documents/Git/Github/power-systems-lab \ue0b0 \ue0a0 main \ue0b0 pdflatex --version\n\npdfTeX 3.141592653-2.6-1.40.26 (TeX Live 2025/dev/Debian)\nkpathsea version 6.4.0/dev\nCopyright 2024 Han The Thanh (pdfTeX) et al.\nThere is NO warranty.  Redistribution of this software is\ncovered by the terms of both the pdfTeX copyright and\nthe Lesser GNU General Public License.\nFor more information about these matters, see the file\nnamed COPYING and the pdfTeX source.\nPrimary author of pdfTeX: Han The Thanh (pdfTeX) et al.\nCompiled with libpng 1.6.47; using libpng 1.6.48\nCompiled with zlib 1.3.1; using zlib 1.3.1\nCompiled with xpdf version 4.04\n</code></pre> <p>This <code>pdflatex</code> is the one which is used by vscode to compile latex</p> <p>Now in vscode install <code>latex workshop</code> extension by James-Yu.</p>"},{"location":"Linux/Customization/Tweaks/#emoji","title":"Emoji","text":"<p>Link</p> <p>admonitons for putting notes in markdown</p>"},{"location":"Linux/Development/Git/","title":"Git","text":""},{"location":"Linux/Development/Git/#sphinx","title":"Sphinx","text":"<p>Sphinx Themes</p> <p>Github</p> <p>Sphinx Docs</p> <p><pre><code>uv pip install sphinx\n</code></pre> Verify installation <pre><code>(.venv) gowtham@debian:~/Documents/Git/Github/operation_linux$ sphinx-build --version\nsphinx-build 8.2.3\n</code></pre></p> <p>To create documentation layout <pre><code>(.venv) gowtham@debian:~/Documents/Git/Github/operation_linux$ sphinx-quickstart docs\nWelcome to the Sphinx 8.2.3 quickstart utility.\n\nPlease enter values for the following settings (just press Enter to\naccept a default value, if one is given in brackets).\n\nSelected root path: docs\n\nYou have two options for placing the build directory for Sphinx output.\nEither, you use a directory \"_build\" within the root path, or you separate\n\"source\" and \"build\" directories within the root path.\n&gt; Separate source and build directories (y/n) [n]: y\n\nThe project name will occur in several places in the built documentation.\n&gt; Project name: Debian Linux Docs\n&gt; Author name(s): Gowtham Mahendran\n&gt; Project release []: 1.0\n\nIf the documents are to be written in a language other than English,\nyou can select a language here by its language code. Sphinx will then\ntranslate text that it generates into that language.\n\nFor a list of supported codes, see\nhttps://www.sphinx-doc.org/en/master/usage/configuration.html#confval-language.\n&gt; Project language [en]: \n\nCreating file /home/gowtham/Documents/Git/Github/operation_linux/docs/source/conf.py.\nCreating file /home/gowtham/Documents/Git/Github/operation_linux/docs/source/index.rst.\nCreating file /home/gowtham/Documents/Git/Github/operation_linux/docs/Makefile.\nCreating file /home/gowtham/Documents/Git/Github/operation_linux/docs/make.bat.\n\nFinished: An initial directory structure has been created.\n\nYou should now populate your master file /home/gowtham/Documents/Git/Github/operation_linux/docs/source/index.rst and create other documentation\nsource files. Use the Makefile to build the docs, like so:\n   make builder\nwhere \"builder\" is one of the supported builders, e.g. html, latex or linkcheck.\n</code></pre></p> <p>Docs folder should be there <pre><code>(.venv) gowtham@debian:~/Documents/Git/Github/operation_linux$ ls\ndocs  easyroam.sh  README.md\n</code></pre></p> <p>To build</p> <pre><code>(.venv) gowtham@debian:~/Documents/Git/Github/operation_linux$ sphinx-build -M html docs/source/ docs/build/\nRunning Sphinx v8.2.3\nloading translations [en]... done\nmaking output directory... done\nbuilding [mo]: targets for 0 po files that are out of date\nwriting output... \nbuilding [html]: targets for 1 source files that are out of date\nupdating environment: [new config] 1 added, 0 changed, 0 removed\nreading sources... [100%] index\nlooking for now-outdated files... none found\npickling environment... done\nchecking consistency... done\npreparing documents... done\ncopying assets... \ncopying static files... \nWriting evaluated template result to /home/gowtham/Documents/Git/Github/operation_linux/docs/build/html/_static/language_data.js\nWriting evaluated template result to /home/gowtham/Documents/Git/Github/operation_linux/docs/build/html/_static/basic.css\nWriting evaluated template result to /home/gowtham/Documents/Git/Github/operation_linux/docs/build/html/_static/documentation_options.js\nWriting evaluated template result to /home/gowtham/Documents/Git/Github/operation_linux/docs/build/html/_static/alabaster.css\ncopying static files: done\ncopying extra files... \ncopying extra files: done\ncopying assets: done\nwriting output... [100%] index\ngenerating indices... genindex done\nwriting additional pages... search done\ndumping search index in English (code: en)... done\ndumping object inventory... done\nbuild succeeded.\n\nThe HTML pages are in docs/build/html.\n</code></pre> <p>I have moved the <code>docs</code> inside <code>sphinx</code> because github can either deploy from <code>root</code> or <code>/docs</code>. I created a <code>docs</code> folder in main dir and copied the contents of <code>docs/build/html</code> to <code>docs</code>.</p> <p>We also need to add <code>.nojekyll</code> file inside <code>docs</code> so that the static files are served.</p> <p>Since I have written down all the docs in wiki as <code>markdown</code>, it is better to include a plugin that reads <code>.md</code> files. So install, <code>myst_parser</code>.</p> <p>Add the plugin to the conf.py file</p> <pre><code>extensions = [\"myst_parser\",]\n\nsource_suffix = {\n    \".rst\": \"restructuredtext\",\n    \".md\": \"markdown\",\n}\n</code></pre> <p>In <code>index.rst</code>, include the code to read the pages, <pre><code>.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n   :glob:\n\n   pages/*\n</code></pre></p> <p>Create a folder called <code>pages</code> inside <code>sources</code> and copy paste all the <code>.md</code> files from <code>wiki</code>.</p> <p>Now run sphinx and copy all the files inside <code>build</code> to <code>docs</code> in the main dir. Add <code>.nojekyll</code> file inside <code>docs/</code> so that the static files are rendered.</p> <p>Clone the repo and set the url </p> <p><code>git remote set-url origin https://github.com/Gowtham-Mahendran/operation_linux.git</code></p> <p>Then, use </p> <p><code>git config credential.helper store</code></p> <p>and enter the user name. For password enter the PAT generated from the Github</p> <p>Now you can push to the repo.</p> <p>To view the passwords, use</p> <p><code>cat ~/.git-credentials</code> </p>"},{"location":"Linux/Development/Git/#git_1","title":"Git","text":"<p>To check which user the repo is linked to,</p> <pre><code>git config --get user.name\ngit config --get user.email\n</code></pre> <p>To check all the details,</p> <pre><code>git config --list\n</code></pre> <p>To set the repo to a user and mail, <pre><code>git config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\"\n</code></pre></p> <p>Omit <code>--global</code> to set the identity only in this repository.</p> <p>Git doesn't allow changes by password. It will accept only Personalized Access Tokens (PAT). So, the remote url should have PAT included. To change this,</p> <p>Profile &gt; Settings &gt; Developer settings &gt; PAT &gt; Fine-grained tokens</p> <p>Grant these permissions:</p> <ul> <li>Read access to metadata</li> <li>Read and Write access to code</li> </ul> <pre><code>git remote set-url origin https://&lt;username&gt;:&lt;PAT&gt;@github.com/&lt;username&gt;/&lt;repo_name&gt;.git\n</code></pre>"},{"location":"Linux/Setup/Common-problems/","title":"Common Problems","text":""},{"location":"Linux/Setup/Common-problems/#nvidia-driver","title":"NVIDIA Driver","text":"<pre><code>[ 0.259410] ACPI BIOS Error (bug): Failure creating named object [_SB.PCI0.GPP0.VGA], AE_ALREADY_EXISTS (20220331/dswload2-326)\n[ 0.259421] ACPI Error: AE_ALREADY_EXISTS, During name lookup/catalog (20220331/psobject-220)\n[ 0.259492] ACPI BIOS Error (bug): Failure creating named object [_SB.PCI0.GPP0.HDAU], AE_ALREADY_EXISTS (20220331/dswload2-326)\n[ 0.259436] ACPI Error: AE_ALREADY_EXISTS, During name lookup/catalog (20220331/psobject-220)\n[ 0.909192] blacklist: Problem blacklisting hash (-13)\n[ 0.909414] blacklist: Problem blacklisting hash (-13)\n[ 0.909528] blacklist: Problem blacklisting hash (-13)\n[ 0.909560] blacklist: Problem blacklisting hash (-13)\n[ 0.909787] blacklist: Problem blacklisting hash (-13)\n[ 1.998245] nouveau 0000:01:00.0: firmware: failed to load nvidia/ga107/nvdec/scrubber.bin (-2)\n[ 1.998271] firmware_class: See https://wiki.debian.org/Firmware for information about missing firmware\n[ 1.998307] nouveau 0000:01:00.0: firmware: failed to load nvidia/ga107/nvdec/scrubber.bin (-2)\n</code></pre> <p>The last three errors shows that the nvidia driver is failed to load. The nvidia-detect script (found in the nvidia-detect package in the non-free section) can also be used to identify the GPU and the recommended driver package to install. Refer the nvidia debian page here</p> <p>Install the detect driver <pre><code>apt install nvidia-detect\n</code></pre></p> <p>Detect the driver using <pre><code>nvidia-detect\n</code></pre></p> <p>The output is as follows</p> <p><pre><code>nvidia-detect\n</code></pre> The output list the device driver compatible for your PC</p> <pre><code>Detected NVIDIA GPUs:\n01:00.0 VGA compatible controller [0300]: NVIDIA Corporation GA107M [GeForce RTX 3050 Mobile] [10de:25a2] (rev a1)\n\nChecking card:  NVIDIA Corporation GA107M [GeForce RTX 3050 Mobile] (rev a1)\nYour card is supported by all driver versions.\nYour card is also supported by the Tesla 470 drivers series.\nIt is recommended to install the\nnvidia-driver\npackage.\n</code></pre> <p>Install the nvidia-driver <pre><code>apt install nvidia-driver\n</code></pre></p> <p>During installation, it prompted saying NVIDIA proprietary driver is conflicting with the open-source Nouveau driver. It asked for reboot after installation. Once installed, Reboot in <code>su</code></p> <pre><code>reboot\n</code></pre> <p>verify the installation using  <pre><code>nvidia-smi\n</code></pre></p> <p>The output is as follows</p> <pre><code>+---------------------------------------------------------------------------------------+\n| NVIDIA-SMI 535.247.01             Driver Version: 535.247.01   CUDA Version: 12.2     |\n|-----------------------------------------+----------------------+----------------------+\n| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |\n|                                         |                      |               MIG M. |\n|=========================================+======================+======================|\n|   0  NVIDIA GeForce RTX 3050 ...    On  | 00000000:01:00.0 Off |                  N/A |\n| N/A   47C    P3              17W /  30W |      8MiB /  4096MiB |      0%      Default |\n|                                         |                      |                  N/A |\n+-----------------------------------------+----------------------+----------------------+\n\n+---------------------------------------------------------------------------------------+\n| Processes:                                                                            |\n|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |\n|        ID   ID                                                             Usage      |\n|=======================================================================================|\n|    0   N/A  N/A       949      G   /usr/lib/xorg/Xorg                            4MiB |\n+---------------------------------------------------------------------------------------+\n</code></pre> <p>while rebooting, the nvidia driver error got resolved.</p> <pre><code>[ 0.259410] ACPI BIOS Error (bug): Failure creating named object [_SB.PCI0.GPP0.VGA], AE_ALREADY_EXISTS (20220331/dswload2-326)\n[ 0.259421] ACPI Error: AE_ALREADY_EXISTS, During name lookup/catalog (20220331/psobject-220)\n[ 0.259492] ACPI BIOS Error (bug): Failure creating named object [_SB.PCI0.GPP0.HDAU], AE_ALREADY_EXISTS (20220331/dswload2-326)\n[ 0.259436] ACPI Error: AE_ALREADY_EXISTS, During name lookup/catalog (20220331/psobject-220)\n[ 0.909192] blacklist: Problem blacklisting hash (-13)\n[ 0.909414] blacklist: Problem blacklisting hash (-13)\n[ 0.909528] blacklist: Problem blacklisting hash (-13)\n[ 0.909560] blacklist: Problem blacklisting hash (-13)\n[ 0.909787] blacklist: Problem blacklisting hash (-13)\n</code></pre>"},{"location":"Linux/Setup/Debian-setup/","title":"Debian-setup","text":"<p>This guide documents the full process of replacing Windows with Debian 13 on an HP laptop, including BIOS setup, offline driver installation, and EasyRoam setup.</p>"},{"location":"Linux/Setup/Debian-setup/#booting-debian","title":"Booting Debian","text":"<p>Downloading and creating Debian bootable drive</p> <p>Go to the Debian distribution page and download the firmware-included ISO for Debian 13. Example: <code>debian-13.1.0-amd64-DVD-1.iso</code></p> <p>Download and install Rufus to write the ISO to a USB: - Select your USB - Choose the ISO file - Use GPT partition scheme - Use UEFI (non-CSM)</p> <p>BIOS/UEFI Configuration</p> <ul> <li>Reboot and press F10 (On HP laptops) repeatedly to enter BIOS setup.</li> <li>Go to Security \u2192 Secure Boot Configuration \u2192 Disable Secure Boot</li> <li>Reboot and press F9 to enter Boot Device Options</li> <li>Choose UEFI:  (e.g., UEFI: SanDisk) <p>Install Debian 13</p> <ul> <li>Select Graphical Install</li> <li>When prompted for network drivers, skip if your hardware isn\u2019t detected</li> <li>Choose Guided Partitioning</li> <li>Set root password</li> <li>Create a normal user</li> </ul> <p>Login Manager Selection</p> <p>If installing multiple desktops, you\u2019ll be prompted to choose a display manager:</p> <ul> <li><code>gdm3</code> \u2192 for GNOME desktop (default)</li> <li><code>sddm</code> \u2192 for KDE Plasma</li> </ul> <p>Switching to superuser</p> <p>Once you are in the startup page, open terminal and Switch to root to get admin privileges for modifying system and installing apps:</p> <p><pre><code>su -\n</code></pre> To update the system, <pre><code>apt update \napt upgrade\n</code></pre></p> <p>To add <code>user</code> to sudo list, go to <code>root</code> and execute <pre><code>usermod -aG sudo &lt;username&gt;\n</code></pre></p> <p>To verify,</p> <pre><code>groups &lt;username&gt;\n</code></pre> <p>This will show something like, <code>&lt;username&gt; : &lt;username&gt; cdrom floppy sudo audio dip video plugdev users netdev bluetooth lpadmin scanner</code>. Now <code>&lt;username&gt;</code> is a <code>superuser</code> or use <code>sudo whoami</code>.</p>"},{"location":"Linux/Setup/Debian-setup/#setting-up-debian-package-sources","title":"Setting Up Debian Package Sources","text":"<p>Once you boot into the system, you need to add repositories so that Debian can fetch and install software packages from official sources.</p> <p>To install the packages, we need to add debian repositories to the <code>sources.list</code>.</p> <p>Open the sources list: <pre><code>sudo nano /etc/apt/sources.list\n</code></pre></p> <p>You\u2019ll be prompted for your password when using sudo.</p> <p>Add the following sources to the list if not already there:</p> <pre><code>deb http://deb.debian.org/debian trixie main contrib non-free non-free-firmware\ndeb http://security.debian.org/debian-security trixie-security main contrib non-free non-free-firmware\ndeb http://deb.debian.org/debian trixie-updates main contrib non-free non-free-firmware\ndeb http://deb.debian.org/debian trixie-backports main contrib non-free non-free-firmware\n</code></pre> <p>Explanation of sources list</p> <p>main \u2192 Free software (essential system &amp; desktop packages) contrib \u2192 Free software that depends on non-free packages non-free \u2192 Non-free software (firmware, drivers, proprietary tools) non-free-firmware \u2192 Firmware now separated in Bookworm+ (needed for Wi-Fi, GPU firmware, etc.) security \u2192 Security updates for Trixie updates \u2192 Regular bugfix updates between point releases backports \u2192 Newer versions of packages (optional, but useful if you need fresh software)</p> <p>To save the changes, <code>Ctrl + O</code> and press <code>Enter</code> to save. To exit nano, press <code>Ctrl + X</code>.</p> <p>Once the sources are added, you can update the packages</p> <p>To fetch the updates from the repositories,</p> <pre><code>sudo apt update\n</code></pre> <p>To see the packages that needs update,</p> <pre><code>apt list --upgradable\n</code></pre> <p>To update <pre><code>sudo apt upgrade\n</code></pre></p> <p>To install softwares and tools, i personally prefer having a package manager,</p> <p>Aptitude provides a user-friendly interface with more advanced features compared to the simple command-line interface of <code>apt-get</code></p> <p>Install <code>aptitude</code> package manager</p> <pre><code>sudo apt install aptitude\n</code></pre> <p>In the Aptitude interface, press <code>/</code> to search package. Navigate using the arrow keys. To install packages, use the <code>+</code> key to select the packages and press <code>g</code> to start the installation process.</p> <p>Sometimes, <code>curl</code> is needed to install packages. You can install it using the <code>aptitude</code></p> <pre><code>sudo aptitude install curl\n</code></pre>"},{"location":"Linux/Setup/First-things-First/","title":"First Things First","text":""},{"location":"Linux/Setup/First-things-First/#1-easyroam-config","title":"1. Easyroam config","text":"<p>The certificate is only valid for 90 days and must be replaced after this period.</p> <p>To configure eduroam using a script, follow these steps:</p> <ol> <li>Open https://www.easyroam.de in your web browser.</li> <li>In the search field, enter your institution name, e.g., <code>UOL</code>.</li> <li>Log in using your institutional credentials.</li> </ol>"},{"location":"Linux/Setup/First-things-First/#2-installing-thunderbird","title":"2. Installing Thunderbird","text":"<p>Thunderbird is my favourite mailing manager. Thunderbird could be installed normally form the apt repositary:</p> <p><pre><code>sudo aptitude install thunderbird \n</code></pre> This downloads the package from online mirrors. Customizing thunderbird is detailed in Customization section.</p>"},{"location":"Linux/Setup/First-things-First/#3-brave-browser","title":"3. Brave Browser","text":"<p>Here is the linux download page of Brave browser</p> <pre><code>aptitude install curl\ncurl -fsS https://dl.brave.com/install.sh | sh\n</code></pre>"},{"location":"Linux/Setup/First-things-First/#4-external-monitor","title":"4. External Monitor","text":"<p>You can preview the current setup by just running: <pre><code>xrandr\n</code></pre></p> <p>The below script will list available GPU output providers. <pre><code>xrandr --listproviders\n</code></pre></p> <p>To place the monitor to the right of laptop screen. <pre><code>xrandr --output HDMI-1-0 --auto --right-of eDP\n</code></pre></p> <p>To duplicate, <pre><code>xrandr --output HDMI-1-0 --mode 1920x1080 --same-as eDP\n</code></pre></p>"},{"location":"Linux/Setup/First-things-First/#5-mounting-network-drives","title":"5. Mounting Network Drives","text":"<ol> <li>Make a new folder in the user directory</li> </ol> <pre><code>mkdir name\n</code></pre> <ol> <li>Check the uid and gid of the user using</li> </ol> <pre><code>id\n</code></pre> <ol> <li>To mount CIFS file systems under Linux, you may need to install additional packages. Install cifs-utils using,</li> </ol> <pre><code>apt install cifs-utils\n</code></pre> <ol> <li>Edit the fstab file to mount permanently and let it be there automatically on boot. To open, we need to be in the root.</li> </ol> <pre><code>sudo nano /etc/fstab   \n</code></pre> <ol> <li>You can add entries to /etc/fstab (you must be root for that or use sudo). The entries should have the form: Refer</li> </ol> <pre><code>//server_address/share &lt;mount_point&gt; cifs vers=3.0,workgroup=W2KROOT,username=&lt;user&gt;,file_mode=0600,dir_mode=0700,uid=&lt;linux_username&gt;,gid=&lt;linux_group&gt;,noauto,users 0 0\n</code></pre> <ol> <li>Then, to mount the directories, you can use the following command as a user without root-privileges:</li> </ol> <pre><code>$ mount &lt;mount_point&gt;\n</code></pre> <p>There will be a warning message,</p> <pre><code>mount: (hint) your fstab has been modified, but systemd still uses\n      the old version; use 'systemctl daemon-reload' to reload.\n</code></pre> <p>It means, if you've recently edited <code>/etc/fstab</code>, <code>systemd</code> is still using a cached version, and to fully apply the new changes, you should run:</p> <pre><code>systemctl daemon-reload\n</code></pre>"},{"location":"Linux/Software/Codium/","title":"VSCodium","text":"<p>Here is the official guide from the VSCodium website</p> <ol> <li> <p>Add the GPG key of the repository: <pre><code>wget -qO - https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg \\\n   | gpg --dearmor \\\n   | sudo dd of=/usr/share/keyrings/vscodium-archive-keyring.gpg\n</code></pre></p> </li> <li> <p>Add the repository: <pre><code>echo 'deb [arch=amd64,arm64 signed-by=/usr/share/keyrings/vscodium-archive-keyring.gpg] https://download.vscodium.com/debs vscodium main' \\\n   | sudo tee /etc/apt/sources.list.d/vscodium.list\n</code></pre></p> </li> <li> <p>Update then install vscodium (if you want vscodium-insiders, then replace codium by codium-insiders): <pre><code>sudo apt update &amp;&amp; sudo apt install codium\n</code></pre></p> </li> <li> <p>To open VSCodium, execute <code>codium</code> in terminal</p> </li> </ol>"},{"location":"Linux/Software/Docker/","title":"Docker Desktop","text":"<ol> <li>KVM virtualization support - Refer</li> </ol> <p>Docker Desktop runs a VM that requires KVM support. The kvm module should load automatically if the host has virtualization support.</p> <p>KVM (Kernel-based Virtual Machine) is a Linux kernel module that enables your system to act as a hypervisor \u2014 allowing you to run virtual machines (VMs) with near-native performance. KVM lets your Linux system use the CPU's hardware virtualization features to run other operating systems or environments efficiently. It\u2019s built into the Linux kernel (kvm, kvm_intel, or kvm_amd modules). Unlike Docker Engine (which runs containers natively on Linux), Docker Desktop for Linux, Runs Docker inside a virtual machine (VM) for isolation and consistency (like it does on Windows/macOS). That VM is powered by QEMU/KVM. So, Docker Desktop requires KVM to:</p> <ul> <li>Create and run that internal VM efficiently</li> <li>Use hardware-accelerated virtualization</li> </ul> <p>To Check if your CPU supports virtualization:</p> <pre><code>egrep -c '(vmx|svm)' /proc/cpuinfo\n</code></pre> <p>If output is 0: your CPU doesn\u2019t support virtualization or it\u2019s disabled in BIOS. If &gt;0: your CPU supports virtualization. Also, make sure virtualization is enabled in BIOS/UEFI.</p> <p>To check if the KVM modules are enabled, run: <pre><code>lsmod | grep kvm\n</code></pre></p> <pre><code>kvm_amd               163840  0\nkvm                  1146880  1 kvm_amd\nirqbypass              16384  1 kvm\nccp                   118784  1 kvm_amd\n</code></pre> <p>Set up KVM device user permissions To check ownership of /dev/kvm, run :</p> <p><code>$ ls -al /dev/kvm crw-rw----+ 1 root kvm 10, 232 Jun 29 11:54 /dev/kvm</code> Add your user to the kvm group in order to access the kvm device:</p> <p><code>sudo usermod -aG kvm $USER</code></p> <p>Sign out and sign back in so that your group membership is re-evaluated.</p> <p>Check and verify,    <code>gowtham@deb-gowarc:~$ groups gowtham gowtham : gowtham cdrom floppy sudo audio dip video plugdev users kvm netdev bluetooth lpadmin scanner</code></p> <ol> <li>GNOME terminal - Refer</li> </ol> <p>If you're not using GNOME, you must install gnome-terminal to enable terminal access from Docker Desktop:    <code>sudo apt install gnome-terminal</code>    3. Uninstall old versions Before you can install Docker Engine, you need to uninstall any conflicting packages.</p> <p>Your Linux distribution may provide unofficial Docker packages, which may conflict with the official packages provided by Docker. You must uninstall these packages before you install the official version of Docker Engine.</p> <p>The unofficial packages to uninstall are: * docker.io * docker-compose * docker-doc * podman-docker Moreover, Docker Engine depends on <code>containerd</code> and <code>runc</code>. Docker Engine bundles these dependencies as one bundle: <code>containerd.io</code>. If you have installed the <code>containerd</code> or <code>runc</code> previously, uninstall them to avoid conflicts with the versions bundled with Docker Engine.</p> <p>Run the following command to uninstall all conflicting packages:    <code>for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done</code></p> <p>This will uninstall all the packages if anything is present.</p> <ol> <li>Install using the apt repository</li> </ol> <p>Before you install Docker Engine for the first time on a new host machine, you need to set up the Docker apt repository. Afterward, you can install and update Docker from the repository.    ```</p>"},{"location":"Linux/Software/Docker/#add-dockers-official-gpg-key","title":"Add Docker's official GPG key:","text":"<p>sudo apt-get update sudo apt-get install ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc</p>"},{"location":"Linux/Software/Docker/#add-the-repository-to-apt-sources","title":"Add the repository to Apt sources:","text":"<p>echo \\   \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \\   $(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\") stable\" | \\   sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</p> <p>sudo apt-get update    ```</p> <p>To install Docker packages, use    <code>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</code></p> <p>Verify that the installation is successful by running the hello-world image:</p> <p><code>sudo docker run hello-world</code> This command downloads a test image and runs it in a container. When the container runs, it prints a confirmation message and exits.</p> <p>``` gowtham@deb-gowarc:~$ sudo docker run hello-world [sudo] password for gowtham:  Unable to find image 'hello-world:latest' locally latest: Pulling from library/hello-world e6590344b1a5: Pull complete  Digest: sha256:940c619fbd418f9b2b1b63e25d8861f9cc1b46e3fc8b018ccfe8b78f19b8cc4f Status: Downloaded newer image for hello-world:latest</p> <p>Hello from Docker! This message shows that your installation appears to be working correctly.</p> <p>To generate this message, Docker took the following steps:  1. The Docker client contacted the Docker daemon.  2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.     (amd64)  3. The Docker daemon created a new container from that image which runs the     executable that produces the output you are currently reading.  4. The Docker daemon streamed that output to the Docker client, which sent it     to your terminal.</p> <p>To try something more ambitious, you can run an Ubuntu container with:  $ docker run -it ubuntu bash</p> <p>Share images, automate workflows, and more with a free Docker ID:  https://hub.docker.com/</p> <p>For more examples and ideas, visit:  https://docs.docker.com/get-started/    ```</p> <p>You have now successfully installed and started Docker Engine.</p> <ol> <li> <p>Download the latest DEB package.</p> </li> <li> <p>Install the package using apt:    <code>sudo apt-get update sudo apt-get install ./docker-desktop-amd64.deb</code></p> </li> </ol> <p>At the end of the installation process, apt displays an error due to installing a downloaded package. You can ignore this error message. Refer <code>N: Download is performed unsandboxed as root, as file '/home/user/Downloads/docker-desktop.deb' couldn't be accessed by user '_apt'. - pkgAcquire::Run (13: Permission denied)</code>    8. Open Docker desktop application and we need to configure the Docker credentials to use the Docker desktop!</p> <p>If you\u2019re using Docker Desktop on Debian and you see errors or can\u2019t sign in due to missing Docker credential store, it usually means the <code>docker-credential-pass</code> helper isn't set up. This is needed when Docker Desktop tries to securely store your login credentials.</p> <p><code>docker-credential-pass</code> is a credential helper that stores your Docker credentials using GNU pass, which in turn uses GPG encryption. Docker Desktop tries to use this helper by default on Linux when logging in.</p> <p>Install pass and gnupg    <code>sudo apt install pass gnupg2</code> Generate a GPG key    ``` gowtham@deb-gowarc:~$ gpg --full-generate-key gpg (GnuPG) 2.2.40; Copyright (C) 2022 g10 Code GmbH This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law.</p> <p>Please select what kind of key you want:    (1) RSA and RSA (default)    (2) DSA and Elgamal    (3) DSA (sign only)    (4) RSA (sign only)   (14) Existing key from card Your selection? 1 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? (3072) 4096 Requested keysize is 4096 bits Please specify how long the key should be valid.          0 = key does not expire         = key expires in n days       w = key expires in n weeks       m = key expires in n months       y = key expires in n years Key is valid for? (0) 1w Key expires at Sun 06 Jul 2025 03:08:06 PM CEST Is this correct? (y/N) y <p>GnuPG needs to construct a user ID to identify your key.</p> <p>Real name: xxxx Email address: xxxxxxxxxx@xxx.com Comment: Docker Desktop You selected this USER-ID:     \"xxxx (Docker Desktop) xxxxxxxxxx@xxx.com\"</p> <p>Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. gpg: directory '/home/gowtham/.gnupg/openpgp-revocs.d' created gpg: revocation certificate stored as '/home/gowtham/.gnupg/openpgp-revocs.d/xxxxxxxxxxx.rev' public and secret key created and signed.</p> <p>pub   rsa4096 2025-06-29 [SC] [expires: 2025-07-06]       xxxxxxxxxxxxx uid                      xxxxx (Docker Desktop) xxxxxxxxxx@xxxx.com sub   rsa4096 2025-06-29 [E] [expires: 2025-07-06]    <code>Once done, list your keys:</code> gpg --list-secret-keys --keyid-format LONG    <code>Output will look like:</code> /home/gowtham/.gnupg/secring.gpg</p> <p>sec   rsa4096/ABCDEF1234567890 2025-06-29 [SC]       Key fingerprint = XXXX XXXX XXXX XXXX XXXX uid                          Gowtham you@example.com    ```</p> <p>Copy the part after rsa4096/ \u2014 that's your GPG key ID.</p> <p>Initialize <code>pass</code> with your GPG key    <code>pass init ABCDEF1234567890</code></p> <p>Install <code>docker-credential-pass</code></p> <p>docker-credential-helpers = a project/repository containing multiple credential helpers (including docker-credential-pass)</p> <p>docker-credential-pass = the actual binary you need to use with Docker to store credentials using pass (GPG-based)</p> <p>The Docker Credential helpers can be found in the Github page. The executables can be found in the release page</p> <p>To download and install,    <code>curl -Lo docker-credential-pass https://github.com/docker/docker-credential-helpers/releases/download/v0.9.3/docker-credential-pass-v0.9.3.linux-amd64 chmod +x docker-credential-pass sudo mv docker-credential-pass /usr/local/bin/</code> To confirm if it\u2019s installed:    <code>which docker-credential-pass</code> It should return:    <code>/usr/local/bin/docker-credential-pass</code></p> <p>To configure Docker to use it with:    <code>nano ~/.docker/config.json</code></p> <p>\"credsStore\": \"desktop\" tells Docker to use Docker Desktop's built-in credential store, which usually integrates with the system keyring or GUI-specific helpers.</p> <p>However, on Debian Linux, the \"desktop\" credential store might not work properly unless you have all its dependencies set up \u2014 and it's likely why your Docker login is failing. Since you\u2019ve now installed docker-credential-pass and setted up pass with GPG, you should replace \"desktop\" with \"pass\":</p> <p><code>{   \"credsStore\": \"pass\" }</code></p> <p>Now, execute <code>docker login</code>, Click the link shown and paste the OTP, create an account and login in. It will show success message.    ``` gowtham@deb-gowarc:~$ sudo docker login</p> <p>USING WEB-BASED LOGIN</p> <p>i Info \u2192 To sign in with credentials on the command line, use 'docker login -u ' <p>Your one-time device confirmation code is: xxxx-xxxx Press ENTER to open your browser or submit your device code here: https://login.docker.com/activate</p> <p>Waiting for authentication in the browser\u2026 Login succeeded    <code>`` After successful login,</code>Login succeeded` message will be shown. Close and reopen docker desktop app and the user will be logged in.</p> <p>Once the GPG key expires, see the expiration using the command, <code>gpg --list-secret-keys --keyid-format LONG</code> Copy the part after rsa4096/ \u2014 that\u2019s your key ID.</p> <p>Edit the key using,    <code>gpg --edit-key ABCDEF1234567890</code> (replace ABCDEF1234567890 with your actual key ID)</p> <p>Inside the GPG prompt, run <code>expire</code>. GPG will prompt you to set a new expiration date for: the primary key and optionally for subkeys (choose yes for each)    <code>Key is valid for? (0) 1y</code></p> <p>After setting expiration, type <code>save</code> and the GPG will update and exit.</p> <ol> <li>For post-install - refer here (not needed since we are using Docker desktop)</li> </ol>"},{"location":"Linux/Software/Docker/#resolving-docker-duplicate-installations","title":"Resolving Docker duplicate installations","text":"<p>If there are 2 docker versions, they may conflict with each other. To check, <pre><code>gowtham@deb-gowarc:~/Documents/Gitlab/python-course-platform$ docker context ls\nNAME            DESCRIPTION                               DOCKER ENDPOINT                                    ERROR\ndefault *       Current DOCKER_HOST based configuration   unix:///var/run/docker.sock                        \ndesktop-linux   Docker Desktop                            unix:///home/gowtham/.docker/desktop/docker.sock   \n</code></pre></p> <p>The star next to desktop-linux was there before you switched. After <code>docker context use default</code>, the \u201c\u201d moves to default, meaning all CLI commands now talk to /var/run/docker.sock (the system daemon) instead of the Desktop socket. Now you can safely uninstall docker desktop if you are okay working with CLI (Command Line Interface).</p> <p>To simply delete the named \u201cdesktop-linux\u201d context from your local Docker CLI configuration. <pre><code>docker context rm desktop-linux\n</code></pre> Stop &amp; disable the Desktop service  <pre><code>systemctl --user stop docker-desktop\nsystemctl --user disable docker-desktop\n</code></pre> Uninstall the Docker Desktop package using <pre><code>sudo apt remove docker-desktop\nsudo apt autoremove\n</code></pre></p>"},{"location":"Linux/Software/Matlab/","title":"MATLAB installation","text":"<ol> <li> <p>Download the iso file for linux</p> </li> <li> <p>Suppose your ISO is called matlab_R2025a_glnxa64.iso and located in your Downloads folder: <pre><code>cd ~/Downloads\nmkdir matlab_iso\nmount -o loop matlab_R2025a_glnxa64.iso matlab_iso\n</code></pre></p> </li> <li> <p>After mounting, files are extracted to <code>matlab_iso</code> folder</p> </li> <li> <p>Now run the installation script in <code>user</code> terminal and not in <code>root</code> <pre><code>cd matlab_iso\n./install\n</code></pre></p> </li> <li> <p>During installation, select the preferred path. After installation, open terminal and enter the path to verify MATLAB.</p> </li> </ol> <p><pre><code>gowtham@deb-gowarc:~$ /home/gowtham/MATLAB/R2024a/bin/matlab -desktop &amp;\n[1] 2757\ngowtham@deb-gowarc:~$ MATLAB is selecting SOFTWARE rendering.\nMESA-LOADER: failed to open radeonsi: /usr/lib/dri/radeonsi_dri.so: cannot open shared object file: No such file or directory (search paths /usr/lib/x86_64-linux-gnu/dri:\\$${ORIGIN}/dri:/usr/lib/dri, suffix _dri)\nfailed to load driver: radeonsi\nMESA-LOADER: failed to open zink: /usr/lib/dri/zink_dri.so: cannot open shared object file: No such file or directory (search paths /usr/lib/x86_64-linux-gnu/dri:\\$${ORIGIN}/dri:/usr/lib/dri, suffix _dri)\nfailed to load driver: zink\nMESA-LOADER: failed to open kms_swrast: /usr/lib/dri/kms_swrast_dri.so: cannot open shared object file: No such file or directory (search paths /usr/lib/x86_64-linux-gnu/dri:\\$${ORIGIN}/dri:/usr/lib/dri, suffix _dri)\nfailed to load driver: kms_swrast\nMESA-LOADER: failed to open swrast: /usr/lib/dri/swrast_dri.so: cannot open shared object file: No such file or directory (search paths /usr/lib/x86_64-linux-gnu/dri:\\$${ORIGIN}/dri:/usr/lib/dri, suffix _dri)\nfailed to load swrast driver\n</code></pre> MATLAB will start automatically.</p> <ol> <li>That error means MATLAB's graphics system can't find the OpenGL drivers (Mesa DRI), so it falls back to software rendering, which is slower and might cause GUI glitches.</li> </ol> <p>You're missing the required <code>.so</code> driver libraries, such as: radeonsi_dri.so (for AMD GPUs), swrast_dri.so (software fallback) and zink_dri.so (generic fallback) <pre><code>sudo apt update\nsudo apt install libgl1-mesa-glx libgl1-mesa-dri mesa-utils\n</code></pre></p> <p>Restart MATLAB</p> <ol> <li>Open MATLAB using <pre><code>/home/gowtham/MATLAB/R2024a/bin/matlab   \n</code></pre></li> </ol> <p>Run opengl info in MATLAB command window    ```</p> <p>opengl info                           Version: '2.1 Mesa 17.1.3'                            Vendor: 'Brian Paul'                          Renderer: 'Mesa X11'                    MaxTextureSize: 16384                            Visual: 'Visual 0x1fe, (RGBA 32 bits (8 8 8 8), Z depth 16 bits, Hardware acceleration, Double buffer, Antialias 0 samples)'                          Software: 'true'              HardwareSupportLevel: 'none (known graphics driver issues)'         SupportsGraphicsSmoothing: 0     SupportsDepthPeelTransparency: 1        SupportsAlignVertexCenters: 0                        Extensions: {152\u00d71 cell}                MaxFrameBufferSize: 16384</p> <p>```</p> <p>Summary of Current Graphics State</p> <ul> <li> <p>OpenGL Vendor - Brian Paul (Mesa software)</p> </li> <li> <p>Renderer - Mesa X11 (CPU rendering)</p> </li> <li> <p>Hardware Acceleration -  Disabled</p> </li> <li> <p>Stability - Good</p> </li> <li> <p>Performance - Slower than GPU, but usable</p> </li> </ul> <p>This confirms that MATLAB is running stably with OpenGL</p> <ol> <li>Verifying openGL    <code>gowtham@deb-gowarc:~$ glxinfo | grep \"OpenGL version\" OpenGL version string: 4.6 (Compatibility Profile) Mesa 22.3.6 gowtham@deb-gowarc:~$ glxinfo | grep \"OpenGL renderer\" OpenGL renderer string: AMD Radeon Graphics (renoir, LLVM 15.0.6, DRM 3.49, 6.1.0-37-amd64)</code></li> </ol> <p>It should be <code>renoir</code>. If it's <code>llvmpipe</code> or <code>Brian Paul</code>, system GPU acceleration is not working yet.</p> <p>To check GPU,</p> <p>``` gowtham@deb-gowarc:~$ lspci -vnn | grep -A12 VGA 01:00.0 VGA compatible controller [0300]: NVIDIA Corporation GA107M [GeForce RTX 3050 Mobile] [10de:25a2] (rev a1) (prog-if 00 [VGA controller])         DeviceName: NVIDIA Graphics Device         Subsystem: Hewlett-Packard Company GA107M [GeForce RTX 3050 Mobile] [103c:88de]         Flags: bus master, fast devsel, latency 0, IRQ 83, IOMMU group 11         Memory at fb000000 (32-bit, non-prefetchable) [size=16M]         Memory at fe00000000 (64-bit, prefetchable) [size=4G]         Memory at ff00000000 (64-bit, prefetchable) [size=32M]         I/O ports at f000 [size=128]         Expansion ROM at fc000000 [virtual] [disabled] [size=512K]         Capabilities:          Kernel driver in use: nvidia         Kernel modules: nvidia <p>-- 05:00.0 VGA compatible controller [0300]: Advanced Micro Devices, Inc. [AMD/ATI] Cezanne [Radeon Vega Series / Radeon Vega Mobile Series] [1002:1638] (rev c5) (prog-if 00 [VGA controller])         DeviceName:  Onboard IGD         Subsystem: Hewlett-Packard Company Cezanne [Radeon Vega Series / Radeon Vega Mobile Series] [103c:88de]         Flags: bus master, fast devsel, latency 0, IRQ 46, IOMMU group 15         Memory at d0000000 (64-bit, prefetchable) [size=256M]         Memory at e0000000 (64-bit, prefetchable) [size=2M]         I/O ports at c000 [size=256]         Memory at fc500000 (32-bit, non-prefetchable) [size=512K]         Capabilities:          Kernel driver in use: amdgpu         Kernel modules: amdgpu <p>05:00.2 Encryption controller [1080]: Advanced Micro Devices, Inc. [AMD] Family 17h (Models 10h-1fh) Platform Security Processor [1022:15df]    <pre><code>9. Switching between GPU\n</code></pre> gowtham@deb-gowarc:~$ glxinfo | grep \"OpenGL renderer\" OpenGL renderer string: AMD Radeon Graphics (renoir, LLVM 15.0.6, DRM 3.49, 6.1.0-37-amd64) gowtham@deb-gowarc:~$ __NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia glxinfo | grep \"OpenGL renderer\" OpenGL renderer string: NVIDIA GeForce RTX 3050 Laptop GPU/PCIe/SSE2 gowtham@deb-gowarc:~$ glxinfo | grep \"OpenGL renderer\" OpenGL renderer string: AMD Radeon Graphics (renoir, LLVM 15.0.6, DRM 3.49, 6.1.0-37-amd64)    ```</p> <p>To run MATLAB on nvidia GPU    <pre><code>__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia /home/gowtham/MATLAB/R2024a/bin/matlab -nosoftwareopengl\n</code></pre> In MATLAB command window,    ```</p> <p>opengl info                           Version: '4.6.0 NVIDIA 535.247.01'                            Vendor: 'NVIDIA Corporation'                          Renderer: 'NVIDIA GeForce RTX 3050 Laptop GPU/PCIe/SSE2'                    MaxTextureSize: 32768                            Visual: 'Visual 0x650, (RGBA 32 bits (8 8 8 8), Z depth 16 bits, Hardware acceleration, Double buffer, Antialias 8 samples)'                          Software: 'false'              HardwareSupportLevel: 'full'         SupportsGraphicsSmoothing: 1     SupportsDepthPeelTransparency: 1        SupportsAlignVertexCenters: 1                        Extensions: {401\u00d71 cell}                MaxFrameBufferSize: 32768    <pre><code>10. Compilers for MATLAB\n\nWe need to install compilers for MATLAB to perform the tasks\n</code></pre>    apt install build-essential    <pre><code>This installs: gcc (C compiler), g++ (C++ compiler), make (build tool) and libstdc++ headers. To check the version of gcc\n</code></pre>    gowtham@deb-gowarc:~$ gcc --version    gcc (Debian 12.2.0-14+deb12u1) 12.2.0    Copyright (C) 2022 Free Software Foundation, Inc.    This is free software; see the source for copying conditions.  There is NO    warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    <pre><code>See supported MATLAB compatible linux compilers [here](https://www.mathworks.com/support/requirements/supported-compilers-linux.html)\n\nTo test, in MATLAB command window\n</code></pre> mex -setup MEX configured to use 'gcc' for C language compilation.</p> <p>To choose a different language, select one from the following:  mex -setup C++   mex -setup FORTRAN    <code>`` If it outputs</code>MEX configured to use 'gcc' for C language compilation`, everything is in order.</p>"},{"location":"Linux/Software/Matlab/#c2000-setup","title":"C2000 Setup","text":"<p>Download CCS offline installer.</p> <p>To extract the files, go to your Downloads folder, <pre><code>cd ~/Downloads\ntar -xvzf ccs*_linux-x64.tar.gz\ncd ccs*_linux-x64\n</code></pre> tar \u2192 The program used to create/extract archive files</p> <p>Options:</p> <p>x \u2192 extract files</p> <p>v \u2192 verbose (shows files while extracting)</p> <p>z \u2192 decompress using gzip (.gz)</p> <p>f \u2192 use the file name provided next</p> <p>Run the installer using, <pre><code>sudo ./ccs_setup_12.x.x.x.run\n</code></pre></p> <p>Official TI Linux host support can be found here</p> <p>CCS requires a 64-bit distribution of Linux. 32-bit distributions are not supported with current versions of CCS.</p> <p>CCS has dependencies on several libraries being installed on the system. The CCS installer will run a dependency check for these and inform the user of any missing dependencies.</p> <p></p> <p>To install dependencies, <pre><code>sudo apt update\nsudo apt install libc6-i386 libusb-0.1-4 libgconf-2-4 libncurses5 libpython2.7 libtinfo5\n</code></pre> Since <code>libpython2.7</code> is not in debian 12, it will give error installation. Remove <code>libpython2.7</code> and install the rest of the dependencies. Now, to install <code>libpython2.7</code> follow the below steps,</p> <p>1. Check Python Availability</p> <p>CCS requires Python 2 for some legacy scripts. By default, Debian 12 does not ship Python 2.</p> <pre><code>which python\n# Output: python not found\n\nwhere python\n# Output: python not found\n\npython3 --version\n# Output: Python 3.11.2\n\npython2 --version\n# Output: command not found\n</code></pre> <p>2. Verify Python Executables in <code>/usr/bin</code></p> <pre><code>ls /usr/bin/python*\n# Output:\n# /usr/bin/python3\n# /usr/bin/python3.11\n</code></pre> <p>At this stage, Python 2 was not installed.</p> <p>3. Update System Packages</p> <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre> <p>4. Attempt to Install Python 2 (Fails on Bookworm)</p> <pre><code>sudo apt install python2\n</code></pre> <p>Result:</p> <pre><code>Package python2 is not available, but is referred to by another package.\n</code></pre> <p>5. Enable Debian Bullseye Repository (for Legacy Python 2)</p> <p>I manually edited the APT sources list:</p> <pre><code>sudo nano /etc/apt/sources.list\n</code></pre> <p>Added the following line:</p> <pre><code>deb http://deb.debian.org/debian bullseye main\n</code></pre> <p>Then updated package lists:</p> <pre><code>sudo apt update\n</code></pre> <p>6. Install Python 2 from Bullseye Repository</p> <p><pre><code>sudo apt install -t bullseye python2 libpython2.7 libpython2.7-minimal libpython2.7-stdlib\n</code></pre> The output will look like this,  <pre><code>gowtham@deb-gowarc \ue0b0 ~ \ue0b0 sudo apt install -t bullseye python2 libpython2.7 libpython2.7-minimal libpython2.7-stdlib\n\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nThe following packages were automatically installed and are no longer required:\n  libslirp0 pigz slirp4netns\nUse 'sudo apt autoremove' to remove them.\nThe following additional packages will be installed:\n  libffi7 libpython2-stdlib libssl1.1 python2-minimal python2.7 python2.7-minimal\nSuggested packages:\n  python2-doc python-tk python2.7-doc binfmt-support\nThe following NEW packages will be installed:\n  libffi7 libpython2-stdlib libpython2.7 libpython2.7-minimal libpython2.7-stdlib libssl1.1 python2\n  python2-minimal python2.7 python2.7-minimal\n0 upgraded, 10 newly installed, 0 to remove and 0 not upgraded.\nNeed to get 6,564 kB of archives.\nAfter this operation, 23.9 MB of additional disk space will be used.\nDo you want to continue? [Y/n] y\n</code></pre></p> <p>7. Verify Python2 Installation</p> <pre><code>python2 --version\n# Output: Python 2.7.18\n</code></pre> <p>To verify installed dependencies, </p> <p><pre><code>gowtham@deb-gowarc \ue0b0 ~ \ue0b0 dpkg -l | grep python2\nii  libpython2-stdlib:amd64                       2.7.18-3                            amd64        interactive high-level object-oriented language (Python2)\nii  libpython2.7:amd64                            2.7.18-8+deb11u1                    amd64        Shared Python runtime library (version 2.7)\nii  libpython2.7-minimal:amd64                    2.7.18-8+deb11u1                    amd64        Minimal subset of the Python language (version 2.7)\nii  libpython2.7-stdlib:amd64                     2.7.18-8+deb11u1                    amd64        Interactive high-level object-oriented language (standard library, version 2.7)\nii  python2                                       2.7.18-3                            amd64        interactive high-level object-oriented language (Python2 version)\nii  python2-minimal                               2.7.18-3                            amd64        minimal subset of the Python2 language\nii  python2.7                                     2.7.18-8+deb11u1                    amd64        Interactive high-level object-oriented language (version 2.7)\nii  python2.7-minimal                             2.7.18-8+deb11u1                    amd64        Minimal subset of the Python language (version 2.7)\n</code></pre> Since libpython2.7 is not seen there. To verify it is installed, run <pre><code>gowtham@deb-gowarc \ue0b0 ~ \ue0b0 dpkg -L libpython2.7 | grep libpython2.7.so.1.0\n\n/usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0\n</code></pre></p> <p>This confirms that the package is successfully installed.</p> <p>Now, CCS can run Python2 scripts. Now remove Bullseye from <code>sources.list</code> using</p>"},{"location":"Linux/Software/Matlab/#gowthamdeb-gowarc-sudo-nano-etcaptsourceslist-gowthamdeb-gowarc-sudo-apt-update","title":"<pre><code> gowtham@deb-gowarc \ue0b0 ~ \ue0b0 sudo nano /etc/apt/sources.list\n\n gowtham@deb-gowarc \ue0b0 ~ \ue0b0 sudo apt update \n</code></pre>","text":"<p>8. Install Code Composer Studio</p> <pre><code>gowtham@deb-gowarc \ue0b0 ~/Downloads/CCS12.4.0.00007_linux-x64 \ue0b0 ./ccs_setup_12.4.0.00007.run \n</code></pre> <p></p> <p></p> <p>After successful installation, run the <code>install_scripts.sh</code> file using <pre><code>gowtham@deb-gowarc \ue0b0 ~ \ue0b0 /home/gowtham/ti/ccs1240/ccs/install_scripts/\ngowtham@deb-gowarc \ue0b0 ~/ti/ccs1240/ccs/install_scripts \ue0b0 ls\n71-ti-permissions.rules  install_drivers.sh  ti_permissions_install.sh  uninstall_drivers.sh\ngowtham@deb-gowarc \ue0b0 ~/ti/ccs1240/ccs/install_scripts \ue0b0 sudo ./install_drivers.sh \nTI permissions file installation completed successfully. Some distros of Linux\nmay require a reboot in order for the driver to function properly.  For other\ndistros, restarting udev is sufficient.  Restarting udev now ... \ngowtham@deb-gowarc \ue0b0 ~/ti/ccs1240/ccs/install_scripts \ue0b0 \n</code></pre> The installed python versions can be seen using, <pre><code>gowtham@deb-gowarc \ue0b0 ~ \ue0b0 ls /usr/bin/python*\n/usr/bin/python2  /usr/bin/python2.7  /usr/bin/python3  /usr/bin/python3.11\n</code></pre></p> <p>To run ccs, <pre><code>gowtham@deb-gowarc \ue0b0 ~ \ue0b0 ~/ti/ccs1240/ccs/eclipse/ccstudio \n</code></pre></p> <p></p> <p>Click <code>Launch</code>. The ccs is successfully installed and verified.</p> <p></p> <p>Now open MATLAB and enter <code>c2000setup</code> in the command window,</p> <p></p> <p>Select the Board and automatically install third party softwares,</p> <p></p> <p>In the next step, it is telling that ccs is not installed. This is because <code>MATLAB</code> looks for CCS in standard installation directories like:</p> <p><code>/opt/ti/ccs*/ccs/eclipse/ccstudio</code> on linux and <code>C:\\ti\\ccs*</code> on Windows</p> <p>Since I installed it in '/home/gowtham/ti/ccs1240/ccs', it won\u2019t detect it automatically. To verify the existing dir, open command window in MATLAB,</p> <p><pre><code>&gt;&gt; getpref('c2000')\n\nans = []\n</code></pre> The error confirms that MATLAB has no CCS installation path stored yet, which is why the Hardware Setup cannot detect Code Composer Studio (CCS).</p> <p>To add the location, <pre><code>ccsRoot = '/home/gowtham/ti/ccs1240/ccs';\nsetpref('c2000','CCSInstallPath',ccsRoot);\n</code></pre> To verify, <pre><code>&gt;&gt; getpref('c2000')\n\nans = \n\n  struct with fields:\n\n    CCSInstallPath: '/home/gowtham/ti/ccs1240/ccs'\n</code></pre></p>"},{"location":"Linux/Software/Matlab/#c2000ware","title":"C2000Ware","text":"<p>Download c2000ware</p> <pre><code>gowtham@deb-gowarc \ue0b0 /opt \ue0b0 ~/Downloads \n gowtham@deb-gowarc \ue0b0 ~/Downloads \ue0b0 ./C2000Ware_5_00_00_00_setup.run --mode unattended --prefix ~/ti/c2000  \n\nProblem running post-install step. Installation may not complete correctly\n Error creating dynamic link ../driverlib/f28p65x/examples /home/gowtham/ti/c2000/C2000Ware_5_00_00_00/driverlib/f28P65x/examples\n \u2718 gowtham@deb-gowarc \ue0b0 ~/Downloads \ue0b0 ~/ti/\n gowtham@deb-gowarc \ue0b0 ~/ti \ue0b0 ls\nc2000  ccs1240  CCSExternalReferences  tirex-localserver-3.7.1\n gowtham@deb-gowarc \ue0b0 ~/ti \ue0b0 rm -rf c2000\n gowtham@deb-gowarc \ue0b0 ~/ti \ue0b0 ~/Downloads \n gowtham@deb-gowarc \ue0b0 ~/Downloads \ue0b0 sudo ./C2000Ware_5_00_00_00_setup.run --mode unattended --prefix ~/ti/c2000\n</code></pre> <p>Run with <code>sudo</code> to prevent case sensitive error.</p> <p>Now run <code>c2000setup</code> in matlab</p> <p></p> <p></p> <p></p>"},{"location":"Linux/Software/Mini-forge/","title":"Miniforge","text":"<ul> <li> <p>Download conda-forge installer from the website</p> </li> <li> <p>Go to the directory and run</p> </li> </ul> <pre><code>bash Miniforge3-$(uname)-$(uname -m).sh\n</code></pre> <p>Since <code>uname</code> outputs <code>Linux</code> and <code>uname -m</code> outputs <code>x86_64</code>, running the command <code>Miniforge3-$(uname)-$(uname -m).sh</code> is similar to mentioning the actual file name <code>Miniforge3-Linux-x86_64.sh</code>.</p> <ul> <li>It will ask to read the license agreement and now it will show <code>end</code>. Now type <code>yes</code> and the installation will begin.</li> </ul> <pre><code>Miniforge3 will now be installed into this location:\n/home/gowtham/miniforge3\n\n- Press ENTER to confirm the location\n- Press CTRL-C to abort the installation\n- Or specify a different location below\n</code></pre> <p>Press <code>ENTER</code></p> <ul> <li>Once installation is done, it prompts</li> </ul> <pre><code>Do you wish to update your shell profile to automatically initialize conda?\nThis will activate conda on startup and change the command prompt when activated.\nIf you'd prefer that conda's base environment not be activated on startup,\nrun the following command when conda is activated:\n\nconda config --set auto_activate_base false\n\nYou can undo this by running `conda init --reverse $SHELL`? [yes|no]\n</code></pre> <p>If <code>yes</code> - Adds Conda to your shell startup file. conda is ready every time.  If <code>no</code> - You\u2019ll have to manually source <code>~/miniforge3/bin/activate</code> each time.</p> <p>press <code>yes</code> in this case. </p> <ul> <li>Successfully installed</li> </ul> <pre><code>no change     /home/gowtham/miniforge3/condabin/conda\nno change     /home/gowtham/miniforge3/bin/conda\nno change     /home/gowtham/miniforge3/bin/conda-env\nno change     /home/gowtham/miniforge3/bin/activate\nno change     /home/gowtham/miniforge3/bin/deactivate\nno change     /home/gowtham/miniforge3/etc/profile.d/conda.sh\nno change     /home/gowtham/miniforge3/etc/fish/conf.d/conda.fish\nno change     /home/gowtham/miniforge3/shell/condabin/Conda.psm1\nno change     /home/gowtham/miniforge3/shell/condabin/conda-hook.ps1\nno change     /home/gowtham/miniforge3/lib/python3.12/site-packages/xontrib/conda.xsh\nno change     /home/gowtham/miniforge3/etc/profile.d/conda.csh\nmodified      /home/gowtham/.bashrc\n\n==&gt; For changes to take effect, close and re-open your current shell. &lt;==\n\nRunning `shell init`, which:\n - modifies RC file: \"/home/gowtham/.bashrc\"\n - generates config for root prefix: \"/home/gowtham/miniforge3\"\n - sets mamba executable to: \"/home/gowtham/miniforge3/bin/mamba\"\nThe following has been added in your \"/home/gowtham/.bashrc\" file\n\n# &gt;&gt;&gt; mamba initialize &gt;&gt;&gt;\n# !! Contents within this block are managed by 'mamba shell init' !!\nexport MAMBA_EXE='/home/gowtham/miniforge3/bin/mamba';\nexport MAMBA_ROOT_PREFIX='/home/gowtham/miniforge3';\n__mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell bash --root-prefix \"$MAMBA_ROOT_PREFIX\" 2&gt; /dev/null)\"\nif [ $? -eq 0 ]; then\n    eval \"$__mamba_setup\"\nelse\n    alias mamba=\"$MAMBA_EXE\"  # Fallback on help from mamba activate\nfi\nunset __mamba_setup\n# &lt;&lt;&lt; mamba initialize &lt;&lt;&lt;\n\nThank you for installing Miniforge3!\n</code></pre> <ul> <li>Close terminal window (Konsole) and open a new one. conda env base can be seen.</li> </ul> <pre><code>(base) gowtham@deb-gowarc:~$ conda --version\nconda 25.3.0\n</code></pre> <ul> <li>To prevent the automatic activation of the conda base environment when you open a new terminal <pre><code>conda config --set auto_activate_base false\n</code></pre></li> </ul> <p>Once again, reopen the terminal. Conda can still be accessed in Konsole but we need to activate the environment when needed. <pre><code>gowtham@deb-gowarc:~$ conda --version\nconda 25.3.0\ngowtham@deb-gowarc:~$ conda activate base\n(base) gowtham@deb-gowarc:~$ conda deactivate\ngowtham@deb-gowarc:~$ conda env list\n\n# conda environments:\n#\nbase                   /home/gowtham/miniforge3\n</code></pre></p>"},{"location":"Linux/Software/Zotero/","title":"Zotero - citation management software","text":"<p>The Git repo is here for deb. It is reccognized officially by zotero.</p> <p>Install the zotero connector extension in the browser, so that the papers can be directly added to zotero</p> <p>create an account and setup in zotero for cloud sync</p> <p>A list of plugins can be found here.</p> <p>For network visualization, use cita. Unfortunaltely it does not support Zotero 7</p> <p>You can choose upto 9 colors for tags. Use this.</p>"},{"location":"Linux/Software/kicad/","title":"KiCAD - Debian Backports","text":"<p>For Bookworm:</p> <p>Debian\u2019s Backports archive is an official way to get newer (\u201cback-ported\u201d) versions of packages on your stable system without sacrificing its overall stability. Backports is a separate APT repository (e.g. bookworm-backports for Debian 12) that Debian maintainers populate with newer releases of software originally built for Debian Testing or Unstable. Stable\u2019s main archive often has older releases (e.g. KiCad 6 in Debian 12). Backports let you get KiCad 9 (or other up-to-date software) without waiting for the next Debian release. Refer</p> <p>To use backports, we need to enable the backports repo,</p> <pre><code>echo \"deb http://deb.debian.org/debian bookworm-backports main contrib non-free\" \\\n  | sudo tee /etc/apt/sources.list.d/bookworm-backports.list\n</code></pre> <p>Then update apt using</p> <pre><code>sudo aptitude update\n</code></pre> <p>Now install KiCAD using,</p> <p><pre><code>sudo aptitude install -t bookworm-backports kicad\n</code></pre> The -t flag in APT stands for \u201ctarget release\u201d (it\u2019s shorthand for --target-release). It tells APT which release (or suite) you want to pull a package from, rather than using the default \u201cstable\u201d archive.</p> <p>For Trixie:</p> <p>Install KiCAD using,</p> <pre><code>sudo aptitude install kicad\n</code></pre>"},{"location":"Power_systems/","title":"Power-systems","text":"Power System Notes <p>     Documentation on foundational and advanced modeling techniques in power systems \u2014 including phasor-domain and EMT-domain analysis with applications in grid stability, renewables, and converter behavior.   </p> Power System Classification %%| fig-align: center %%{init: {   \"flowchart\": {     \"curve\": \"linear\"   } }}%%  flowchart TD     %% Root     A[\"Power System Stability\"]:::root      %% Level 1     A --&gt; B[\"Angle Stability\"]     A --&gt; C[\"Frequency Stability\"]     A --&gt; D[\"Voltage Stability\"]      %% Rotor Angle Stability Branch     B --&gt; B1[\"Small-SignalStability\"]     B --&gt; B2[\"Transient Stability\"]     B1 --&gt; B3[\"Non-OscillatoryInstability\"]     B2 --&gt; B4[\"OscillatoryInstability\"]      %% Frequency Stability Branch     C --&gt; C1[\"Mid-termStability\"]     C --&gt; C2[\"Long-termStability\"]      %% Voltage Stability Branch     D --&gt; D1[\"Large-DisturbanceVoltage Stability\"]     D --&gt; D2[\"Small-DisturbanceVoltage Stability\"]      %% Clickable Links     click A \"/stability/overview\" \"Overview of Power System Stability\"     click B \"/stability/rotor-angle\" \"Rotor Angle Stability\"     click B1 \"/stability/small-disturbance-angle\" \"Small Disturbance Angle Stability\"     click B2 \"/stability/transient\" \"Transient Stability\"     click C \"/stability/frequency\" \"Frequency Stability\"     click D \"/stability/voltage\" \"Voltage Stability\"     click D1 \"/stability/large-disturbance-voltage\" \"Large Disturbance Voltage Stability\"     click D2 \"/stability/small-disturbance-voltage\" \"Small Disturbance Voltage Stability\"  <p>   Reference: Power System Stability and Control - Second Edition </p>"}]}